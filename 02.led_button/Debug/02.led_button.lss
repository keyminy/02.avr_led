
02.led_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e12  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000685  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000453  00000000  00000000  000028ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002d0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	f3 d0       	rcall	.+486    	; 0x290 <main>
  aa:	52 c1       	rjmp	.+676    	; 0x350 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_button>:

// 76543210
// DDRD &= 0x0f; // port[7:4]까지 input으로 선언된것
void init_button(void){
	// one's complement
	BUTTON_DDR &= ~((1<<BUTTON1_PIN) | (1<<BUTTON2_PIN) | (1<<BUTTON3_PIN) | (1<<BUTTON4_PIN));
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	08 95       	ret

000000b6 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  b6:	40 b3       	in	r20, 0x10	; 16
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <get_button+0x10>
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <get_button+0xc>
  ca:	cf 01       	movw	r24, r30
  cc:	84 23       	and	r24, r20
  ce:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	b9 f0       	breq	.+46     	; 0x102 <get_button+0x4c>
  d4:	fb 01       	movw	r30, r22
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	20 81       	ld	r18, Z
  dc:	21 11       	cpse	r18, r1
  de:	11 c0       	rjmp	.+34     	; 0x102 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	ff ef       	ldi	r31, 0xFF	; 255
  e2:	2d ee       	ldi	r18, 0xED	; 237
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	f1 50       	subi	r31, 0x01	; 1
  e8:	20 40       	sbci	r18, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <get_button+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <get_button+0x3a>
  f0:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
  f2:	fb 01       	movw	r30, r22
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 102:	fb 01       	movw	r30, r22
 104:	e0 50       	subi	r30, 0x00	; 0
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	20 81       	ld	r18, Z
 10a:	21 30       	cpi	r18, 0x01	; 1
 10c:	91 f4       	brne	.+36     	; 0x132 <get_button+0x7c>
 10e:	89 2b       	or	r24, r25
 110:	99 f4       	brne	.+38     	; 0x138 <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 112:	fb 01       	movw	r30, r22
 114:	e0 50       	subi	r30, 0x00	; 0
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	10 82       	st	Z, r1
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	ed ee       	ldi	r30, 0xED	; 237
 11e:	f2 e0       	ldi	r31, 0x02	; 2
 120:	91 50       	subi	r25, 0x01	; 1
 122:	e0 40       	sbci	r30, 0x00	; 0
 124:	f0 40       	sbci	r31, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <get_button+0x6a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <get_button+0x74>
 12a:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
}
 13c:	08 95       	ret

0000013e <shift_left_ledon>:
void shift_left_ledon(void);
void shift_right_ledon(void);

// left to right
void shift_left_ledon(void){
	for(int i = 0; i < 8; i++){
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	13 c0       	rjmp	.+38     	; 0x16a <shift_left_ledon+0x2c>
		LED_PORT = 0b00000001 << i;
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	08 2e       	mov	r0, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <shift_left_ledon+0x12>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <shift_left_ledon+0xe>
 154:	2b bb       	out	0x1b, r18	; 27
 156:	2f e3       	ldi	r18, 0x3F	; 63
 158:	3d e0       	ldi	r19, 0x0D	; 13
 15a:	43 e0       	ldi	r20, 0x03	; 3
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	30 40       	sbci	r19, 0x00	; 0
 160:	40 40       	sbci	r20, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <shift_left_ledon+0x1e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <shift_left_ledon+0x28>
 166:	00 00       	nop
void shift_left_ledon(void);
void shift_right_ledon(void);

// left to right
void shift_left_ledon(void){
	for(int i = 0; i < 8; i++){
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	91 05       	cpc	r25, r1
 16e:	54 f3       	brlt	.-44     	; 0x144 <shift_left_ledon+0x6>
		LED_PORT = 0b00000001 << i;
		_delay_ms(1000);
	}
}
 170:	08 95       	ret

00000172 <shift_right_ledon>:
void shift_right_ledon(void){
	for(int i = 0; i < 8; i++){
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	13 c0       	rjmp	.+38     	; 0x19e <shift_right_ledon+0x2c>
		LED_PORT = 0b10000000 >> i;
 178:	20 e8       	ldi	r18, 0x80	; 128
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	08 2e       	mov	r0, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <shift_right_ledon+0x12>
 180:	35 95       	asr	r19
 182:	27 95       	ror	r18
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <shift_right_ledon+0xe>
 188:	2b bb       	out	0x1b, r18	; 27
 18a:	2f e3       	ldi	r18, 0x3F	; 63
 18c:	3d e0       	ldi	r19, 0x0D	; 13
 18e:	43 e0       	ldi	r20, 0x03	; 3
 190:	21 50       	subi	r18, 0x01	; 1
 192:	30 40       	sbci	r19, 0x00	; 0
 194:	40 40       	sbci	r20, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <shift_right_ledon+0x1e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <shift_right_ledon+0x28>
 19a:	00 00       	nop
		LED_PORT = 0b00000001 << i;
		_delay_ms(1000);
	}
}
void shift_right_ledon(void){
	for(int i = 0; i < 8; i++){
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	91 05       	cpc	r25, r1
 1a2:	54 f3       	brlt	.-44     	; 0x178 <shift_right_ledon+0x6>
		LED_PORT = 0b10000000 >> i;
		_delay_ms(1000);
	}
}
 1a4:	08 95       	ret

000001a6 <flower_on>:

// left to right
void flower_on(void){
	PORTA = 0x00;
 1a6:	1b ba       	out	0x1b, r1	; 27
 1a8:	2f e3       	ldi	r18, 0x3F	; 63
 1aa:	4d e0       	ldi	r20, 0x0D	; 13
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	40 40       	sbci	r20, 0x00	; 0
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <flower_on+0x8>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <flower_on+0x12>
 1b8:	00 00       	nop
	_delay_ms(1000);
	for(int i = 0; i < 4; i++){
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	20 c0       	rjmp	.+64     	; 0x200 <flower_on+0x5a>
		PORTA = PORTA | ((0b00001000 >> i) | (0b00010000 << i));
 1c0:	4b b3       	in	r20, 0x1b	; 27
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	bc 01       	movw	r22, r24
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <flower_on+0x2a>
 1cc:	75 95       	asr	r23
 1ce:	67 95       	ror	r22
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <flower_on+0x26>
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <flower_on+0x3a>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <flower_on+0x36>
 1e4:	86 2b       	or	r24, r22
 1e6:	84 2b       	or	r24, r20
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	9f e3       	ldi	r25, 0x3F	; 63
 1ec:	4d e0       	ldi	r20, 0x0D	; 13
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	40 40       	sbci	r20, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <flower_on+0x4a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <flower_on+0x54>
 1fa:	00 00       	nop

// left to right
void flower_on(void){
	PORTA = 0x00;
	_delay_ms(1000);
	for(int i = 0; i < 4; i++){
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255
 200:	24 30       	cpi	r18, 0x04	; 4
 202:	31 05       	cpc	r19, r1
 204:	ec f2       	brlt	.-70     	; 0x1c0 <flower_on+0x1a>
 206:	9f e3       	ldi	r25, 0x3F	; 63
 208:	2d e0       	ldi	r18, 0x0D	; 13
 20a:	43 e0       	ldi	r20, 0x03	; 3
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	40 40       	sbci	r20, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <flower_on+0x66>
 214:	00 c0       	rjmp	.+0      	; 0x216 <flower_on+0x70>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <flower_off>:
		_delay_ms(1000);
	}
	_delay_ms(1000);
}
void flower_off(void){
	PORTA = 0xff;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	2f e3       	ldi	r18, 0x3F	; 63
 220:	4d e0       	ldi	r20, 0x0D	; 13
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	21 50       	subi	r18, 0x01	; 1
 226:	40 40       	sbci	r20, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <flower_off+0xa>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <flower_off+0x14>
 22e:	00 00       	nop
	_delay_ms(1000);
	for(int i = 0; i < 4; i++){
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	20 c0       	rjmp	.+64     	; 0x276 <flower_off+0x5c>
		PORTA = PORTA & ((0b01111111 >> i) & (0b11111110 << i));
 236:	4b b3       	in	r20, 0x1b	; 27
 238:	8f e7       	ldi	r24, 0x7F	; 127
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	bc 01       	movw	r22, r24
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <flower_off+0x2c>
 242:	75 95       	asr	r23
 244:	67 95       	ror	r22
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <flower_off+0x28>
 24a:	8e ef       	ldi	r24, 0xFE	; 254
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <flower_off+0x3c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <flower_off+0x38>
 25a:	86 23       	and	r24, r22
 25c:	84 23       	and	r24, r20
 25e:	8b bb       	out	0x1b, r24	; 27
 260:	9f e3       	ldi	r25, 0x3F	; 63
 262:	4d e0       	ldi	r20, 0x0D	; 13
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	91 50       	subi	r25, 0x01	; 1
 268:	40 40       	sbci	r20, 0x00	; 0
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <flower_off+0x4c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <flower_off+0x56>
 270:	00 00       	nop
	_delay_ms(1000);
}
void flower_off(void){
	PORTA = 0xff;
	_delay_ms(1000);
	for(int i = 0; i < 4; i++){
 272:	2f 5f       	subi	r18, 0xFF	; 255
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	24 30       	cpi	r18, 0x04	; 4
 278:	31 05       	cpc	r19, r1
 27a:	ec f2       	brlt	.-70     	; 0x236 <flower_off+0x1c>
 27c:	9f e3       	ldi	r25, 0x3F	; 63
 27e:	2d e0       	ldi	r18, 0x0D	; 13
 280:	43 e0       	ldi	r20, 0x03	; 3
 282:	91 50       	subi	r25, 0x01	; 1
 284:	20 40       	sbci	r18, 0x00	; 0
 286:	40 40       	sbci	r20, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <flower_off+0x68>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <flower_off+0x72>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <main>:
int main(void)
{
	int button1_state = 0; // 초기상태는 버튼을 off상태로 출발합니다.
	int button2_state = 0;

	LED_DDR = 0xff; // LED가 출력 모드 이므로 all 1로 설정을 한다.
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x00; // LED를 모두 off한다.
 294:	1b ba       	out	0x1b, r1	; 27

	init_button();
 296:	0b df       	rcall	.-490    	; 0xae <init_button>
extern void shift_right_ledon(void);

int main(void)
{
	int button1_state = 0; // 초기상태는 버튼을 off상태로 출발합니다.
	int button2_state = 0;
 298:	00 e0       	ldi	r16, 0x00	; 0
 29a:	10 e0       	ldi	r17, 0x00	; 0
extern void shift_left_ledon(void);
extern void shift_right_ledon(void);

int main(void)
{
	int button1_state = 0; // 초기상태는 버튼을 off상태로 출발합니다.
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
    {
		// 버튼1은 portd4에 연결됨
		// (1) 버튼1을 1번 눌렀다 때면 led전체를 on시키고
		// (2) 버튼1을 1번 눌렀다 떼면 led전체를 off
		//지금 get_button(BUTTON1_PIN,1)은 1로 하드코딩됨
		if(get_button(BUTTON1_PIN,BUTTON1)){ // 버튼을 1번 눌렀다 떼면 반전시킴
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	06 df       	rcall	.-500    	; 0xb6 <get_button>
 2aa:	89 2b       	or	r24, r25
 2ac:	11 f1       	breq	.+68     	; 0x2f2 <main+0x62>
			switch(button1_state){
 2ae:	c1 30       	cpi	r28, 0x01	; 1
 2b0:	d1 05       	cpc	r29, r1
 2b2:	69 f0       	breq	.+26     	; 0x2ce <main+0x3e>
 2b4:	1c f4       	brge	.+6      	; 0x2bc <main+0x2c>
 2b6:	20 97       	sbiw	r28, 0x00	; 0
 2b8:	41 f0       	breq	.+16     	; 0x2ca <main+0x3a>
 2ba:	10 c0       	rjmp	.+32     	; 0x2dc <main+0x4c>
 2bc:	c2 30       	cpi	r28, 0x02	; 2
 2be:	d1 05       	cpc	r29, r1
 2c0:	41 f0       	breq	.+16     	; 0x2d2 <main+0x42>
 2c2:	c3 30       	cpi	r28, 0x03	; 3
 2c4:	d1 05       	cpc	r29, r1
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <main+0x48>
				case 0:
				shift_left_ledon();
 2c8:	09 c0       	rjmp	.+18     	; 0x2dc <main+0x4c>
				break;
 2ca:	39 df       	rcall	.-398    	; 0x13e <shift_left_ledon>
				case 1:
				shift_right_ledon();
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <main+0x4e>
 2ce:	51 df       	rcall	.-350    	; 0x172 <shift_right_ledon>
				break;
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <main+0x4e>
				case 2:
				LED_PORT = 0xff;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	8b bb       	out	0x1b, r24	; 27
				break;
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <main+0x4e>
				case 3:
				LED_PORT = 0x00;
 2d8:	1b ba       	out	0x1b, r1	; 27
				break;
 2da:	01 c0       	rjmp	.+2      	; 0x2de <main+0x4e>
				default:
				LED_PORT = 0x00;
 2dc:	1b ba       	out	0x1b, r1	; 27
				break;
			}
			button1_state++;
 2de:	21 96       	adiw	r28, 0x01	; 1
			button1_state %= 4;
 2e0:	c3 70       	andi	r28, 0x03	; 3
 2e2:	d0 78       	andi	r29, 0x80	; 128
 2e4:	dd 23       	and	r29, r29
 2e6:	e4 f6       	brge	.-72     	; 0x2a0 <main+0x10>
 2e8:	21 97       	sbiw	r28, 0x01	; 1
 2ea:	cc 6f       	ori	r28, 0xFC	; 252
 2ec:	df 6f       	ori	r29, 0xFF	; 255
 2ee:	21 96       	adiw	r28, 0x01	; 1
 2f0:	d7 cf       	rjmp	.-82     	; 0x2a0 <main+0x10>
		}
		else if(get_button(BUTTON2_PIN,BUTTON2)){
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	dd de       	rcall	.-582    	; 0xb6 <get_button>
 2fc:	89 2b       	or	r24, r25
 2fe:	c1 f0       	breq	.+48     	; 0x330 <main+0xa0>
			switch(button2_state){
 300:	01 15       	cp	r16, r1
 302:	11 05       	cpc	r17, r1
 304:	21 f0       	breq	.+8      	; 0x30e <main+0x7e>
 306:	01 30       	cpi	r16, 0x01	; 1
 308:	11 05       	cpc	r17, r1
				case 0:
				flower_on();
 30a:	19 f0       	breq	.+6      	; 0x312 <main+0x82>
 30c:	04 c0       	rjmp	.+8      	; 0x316 <main+0x86>
				break;
 30e:	4b df       	rcall	.-362    	; 0x1a6 <flower_on>
				case 1:
				flower_off();
 310:	03 c0       	rjmp	.+6      	; 0x318 <main+0x88>
 312:	83 df       	rcall	.-250    	; 0x21a <flower_off>
				break;
 314:	01 c0       	rjmp	.+2      	; 0x318 <main+0x88>
				default:
				LED_PORT = 0x00;
 316:	1b ba       	out	0x1b, r1	; 27
				break;
			}
			button2_state++;
 318:	c8 01       	movw	r24, r16
 31a:	01 96       	adiw	r24, 0x01	; 1
			button2_state %= 2; 
 31c:	81 70       	andi	r24, 0x01	; 1
 31e:	90 78       	andi	r25, 0x80	; 128
 320:	99 23       	and	r25, r25
 322:	24 f4       	brge	.+8      	; 0x32c <main+0x9c>
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	8e 6f       	ori	r24, 0xFE	; 254
 328:	9f 6f       	ori	r25, 0xFF	; 255
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	8c 01       	movw	r16, r24
		}else if(get_button(BUTTON3_PIN,BUTTON3)){
 32e:	b8 cf       	rjmp	.-144    	; 0x2a0 <main+0x10>
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	be de       	rcall	.-644    	; 0xb6 <get_button>
 33a:	89 2b       	or	r24, r25
 33c:	09 f4       	brne	.+2      	; 0x340 <main+0xb0>
			while(1){
				if(get_button(BUTTON3_PIN,BUTTON3)){
 33e:	b0 cf       	rjmp	.-160    	; 0x2a0 <main+0x10>
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	b6 de       	rcall	.-660    	; 0xb6 <get_button>
 34a:	89 2b       	or	r24, r25
 34c:	c9 f3       	breq	.-14     	; 0x340 <main+0xb0>
 34e:	a8 cf       	rjmp	.-176    	; 0x2a0 <main+0x10>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
