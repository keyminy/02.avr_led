
02.led_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a11  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4a d0       	rcall	.+148    	; 0x13e <main>
  aa:	64 c0       	rjmp	.+200    	; 0x174 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_button>:

// 76543210
// DDRD &= 0x0f; // port[7:4]까지 input으로 선언된것
void init_button(void){
	// one's complement
	BUTTON_DDR &= ~((1<<BUTTON1_PIN) | (1<<BUTTON2_PIN) | (1<<BUTTON3_PIN) | (1<<BUTTON4_PIN));
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	08 95       	ret

000000b6 <get_button>:
// 버튼이 온전하게 눌렀다 떼어진 상태이면 1을 리턴한다
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  b6:	40 b3       	in	r20, 0x10	; 16
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <get_button+0x10>
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <get_button+0xc>
  ca:	cf 01       	movw	r24, r30
  cc:	84 23       	and	r24, r20
  ce:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	b9 f0       	breq	.+46     	; 0x102 <get_button+0x4c>
  d4:	fb 01       	movw	r30, r22
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	20 81       	ld	r18, Z
  dc:	21 11       	cpse	r18, r1
  de:	11 c0       	rjmp	.+34     	; 0x102 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	ff ef       	ldi	r31, 0xFF	; 255
  e2:	2d ee       	ldi	r18, 0xED	; 237
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	f1 50       	subi	r31, 0x01	; 1
  e8:	20 40       	sbci	r18, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <get_button+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <get_button+0x3a>
  f0:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
  f2:	fb 01       	movw	r30, r22
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 102:	fb 01       	movw	r30, r22
 104:	e0 50       	subi	r30, 0x00	; 0
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	20 81       	ld	r18, Z
 10a:	21 30       	cpi	r18, 0x01	; 1
 10c:	91 f4       	brne	.+36     	; 0x132 <get_button+0x7c>
 10e:	89 2b       	or	r24, r25
 110:	99 f4       	brne	.+38     	; 0x138 <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 112:	fb 01       	movw	r30, r22
 114:	e0 50       	subi	r30, 0x00	; 0
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	10 82       	st	Z, r1
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	ed ee       	ldi	r30, 0xED	; 237
 11e:	f2 e0       	ldi	r31, 0x02	; 2
 120:	91 50       	subi	r25, 0x01	; 1
 122:	e0 40       	sbci	r30, 0x00	; 0
 124:	f0 40       	sbci	r31, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <get_button+0x6a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <get_button+0x74>
 12a:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <main>:

int main(void)
{
	int button1_state = 0; // 초기상태는 버튼을 off상태로 출발합니다.

	LED_DDR = 0xff; // LED가 출력 모드 이므로 all 1로 설정을 한다.
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x00; // LED를 모두 off한다.
 142:	1b ba       	out	0x1b, r1	; 27

	init_button();
 144:	b4 df       	rcall	.-152    	; 0xae <init_button>
// extern : 해당 함수가 다른 파일에 있음을 컴파일러에게 알려준다.
extern int get_button(int button_pin, int button_number); // button.c에 해당 함수가 있으므로 알려준다

int main(void)
{
	int button1_state = 0; // 초기상태는 버튼을 off상태로 출발합니다.
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0x10>
extern void init_button(void); // init_button함수는 button.c에 있다 "extern키워드"
// extern : 해당 함수가 다른 파일에 있음을 컴파일러에게 알려준다.
extern int get_button(int button_pin, int button_number); // button.c에 해당 함수가 있으므로 알려준다

int main(void)
{
 14c:	ec 01       	movw	r28, r24
    {
		// 버튼1은 portd4에 연결됨
		// (1) 버튼1을 1번 눌렀다 때면 led전체를 on시키고
		// (2) 버튼1을 1번 눌렀다 떼면 led전체를 off
		//지금 get_button(BUTTON1_PIN,1)은 1로 하드코딩됨
		if(get_button(BUTTON1_PIN,BUTTON1)){ // 버튼을 1번 눌렀다 떼면 반전시킴
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	af df       	rcall	.-162    	; 0xb6 <get_button>
 158:	89 2b       	or	r24, r25
 15a:	c9 f3       	breq	.-14     	; 0x14e <main+0x10>
			button1_state = !button1_state;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	20 97       	sbiw	r28, 0x00	; 0
 160:	09 f0       	breq	.+2      	; 0x164 <main+0x26>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
			if(button1_state){
 166:	cd 2b       	or	r28, r29
 168:	19 f4       	brne	.+6      	; 0x170 <main+0x32>
				LED_PORT = 0xff;
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	2b bb       	out	0x1b, r18	; 27
 16e:	ee cf       	rjmp	.-36     	; 0x14c <main+0xe>
			}else {
				LED_PORT = 0x00;
 170:	1b ba       	out	0x1b, r1	; 27
 172:	ec cf       	rjmp	.-40     	; 0x14c <main+0xe>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
